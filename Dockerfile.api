FROM node:22-alpine AS base

# Install dependencies
FROM base AS dependencies
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed
RUN apk add --no-cache libc6-compat
WORKDIR /app
ENV PNPM_HOME="/pnpm"
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY api/package.json ./api/
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
	corepack enable pnpm && pnpm install --frozen-lockfile


# Build
FROM base AS build
WORKDIR /app
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/api/node_modules ./api/node_modules
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY api ./api
ARG API_BASE_URL
ARG API_JWT_SECRET
ARG API_PRISMA_BINARY_TARGET
ENV API_BASE_URL=$API_BASE_URL \
	API_JWT_SECRET=$API_JWT_SECRET \
	API_PRISMA_BINARY_TARGET=$API_PRISMA_BINARY_TARGET \
	PNPM_HOME="/pnpm"
RUN --mount=type=cache,id=pnpm,target=/pnpm/store \
	corepack enable pnpm \
		&& pnpm api prisma generate \
		&& pnpm api build \
	&& addgroup --system --gid 1001 nodejs \
	&& adduser --system --uid 1001 api


# Run!
USER api
EXPOSE 3001
ENV API_SCHEMA_NOEMIT=1 \
	NODE_ENV=production \
	PORT=3001
CMD ["node", "api/src/server.js"]
